/*--- General Info ---*/
/*Favicon color: rgb(52, 175, 78);*/


/*Example of attaching a custom event listener 'locationchange'*/
/*In App.js:
  const setPageEventListener = () => {
    dispatch(changePage(window.location.pathname));
  };
  useEffect(() => {
    window.addEventListener("locationchange", setPageEventListener);
    return () =>
      window.removeEventListener("locationchange", setPageEventListener);
  }, []);
*/
/*In index.js:
/*Overwriting history.pushstate, history.replaceState and history.popstate in order
to create a custom 'locationchange' event*/
/*Link: https://stackoverflow.com/questions/6390341/how-to-detect-if-url-has-changed-after-hash-in-javascript*/
window.history.pushState = ((f) =>
  function pushState() {
    var ret = f.apply(this, arguments);
    window.dispatchEvent(new Event("pushstate"));
    window.dispatchEvent(new Event("locationchange"));
    return ret;
  })(window.history.pushState);

window.history.replaceState = ((f) =>
  function replaceState() {
    var ret = f.apply(this, arguments);
    window.dispatchEvent(new Event("replacestate"));
    window.dispatchEvent(new Event("locationchange"));
    return ret;
  })(window.history.replaceState);

window.addEventListener("popstate", () => {
  window.dispatchEvent(new Event("locationchange"));
});


/*--- locationchange Event Listener Explanation ---*/
/*You can arrive at a page either externally or internally. If we're arriving externally we
don't have control of where to direct them, and if they try to access the wrong page 
for their screen size, we need to have some logic to take that request and route them
elsewhere. We accomplish this using React Router DOM's navigate object.*/

This works well but we still need logic to determine where we should direct someone
internally, to one page or another, based on specific factors (for our purposes that factor is
screen size but it could be other factors). Well we could rely on React Router Dom's
logic for this and just always link to one page. Assuming our redirect logic is standard for 
this component as it is in the App level routes then it should redirect just fine.
  - Although relying on app level redirecting would create a single source of truth for
  our redirect logic, it ends up reducing SEO, and still initially renders the wrong page.

The solution would be to conditionally redirect based on some logic or state that
the component is privy to. In our case that piece of state would be the screen-size.
This is the reason why we store our screen size in our Global State, so 
we can access it from any component that might need to make a conditional redirect based
on that information.

All in all, I'm still not 100% sure if url redirects based on screen size is best
practice and what other implications this could have (SEO, crawling, UI/UX, etc.). However,
it's a clever solution for now and I will continue to research this going forward.


/*--- Multi Day Header Scrollbar Offset ---*/
Essentially, the main challenge with this one is the fact that different browsers
have different scrollbar width's. The main content in the Multi Day page has a scrollbar,
therefore its content is offset to the left by that scrollbar's width. The header however
doesn't have a scrollbar, so even once we've offset the header by the timescale width 
(available via a global css variable) we still run into the header and the content being
misaligned.

In order to solve this we essentially need to add another element on the right to offset
the header and this offset element needs to have the same exact width of the scrollbar
in the content below it. Thus the content below the header is offset to the left due to
the scrollbar and the content in the header is offset to the left due to this offset 
element.

Now in order to get as close to the source of truth as possible it could be done so that
the offset width is calculated based on the width of the scrollbar in the main content.
However this seperates Multi-Day Header logic from the Multi Day Header component and 
seeing how the scrollbar's almost never varies within the same browser, it didn't seem 
necessary to base the offset element's width on the specific scroll bar in the
Multi-Day content div. Instead a transparent div is initially rendered in the header with
a scrollbar, once that scrollbar width has been calculated, the component rerenders
with the corrent content and offset.*/


/*--- Getting Creative with the Borders ---*/
/*An interesting challenge I ran into while constructing the Multi-Day view was
the problem of aligning each and every component that wasn't already in some shared
div. This included the TimeScale component on the left, the MultiHeader component
on top, and then the MultiDays grid in the middle.

None of these components were nested in a way so as to allow easy css styling with flexbox
or grid. I made this concious decision in order to stay as true as possible to React and
thinking in React terms. While I could have broken up, say for example the MultiHeader 
component, and taken its pieces and put them in another component with which it needed to
be aligned with, this would have been very counter intuitive from a UI perspective.
Afterall, a header is very clearly a component, doesn't it seem a bit off if under the hood
the one component we call a header is actually being constructed by 7 different pieces 
all from other components?

For those reasons above I decided to keep these components as seperate distinct components,
however now the problem became: How can I ensure that all of these seperate components
line up with each other down to the pixel? Well the short answer is, I didn't. 

After hours of trying to get every single little pixel line up I realized that I was making
things harder than I needed to be. Instead of trying to line up two seperate things, why
don't I instead have one component of this table (not referring to an html table here, 
just that the multi day view looks like a table) as the source of truth and when I need to 
do little stylings down to the pixel I'll just create an element inside of the source of 
truth and move it with absolute positioning so its outside of its parent container!

This is essentially what I did in order to have all the divisional borders on the Multi
Header line up with all the borders in the Multi Day grid. I also relied on this to line
up the cosmetic lines on the timescale component with the borders in the Multi Day grid.
All in all a fun little trick I discovered that could certainly be handy in the future!*/


/*--- Client Side API Call Structuring ---*/
So a big oversimplification in this app vs. what it would look like if it were truly
designed for scale is the lack of pagination. Although we are sending large quantities
of data via JSON serialization from the server, it all gets compressed using a compression
package and our expected delivery payload of about two years of data is only about 7kb
which from what I can tell is a pretty acceptable payload size by API standards.

In a production level application you would most likely query for say a given week, or 
maybe a few weeks so that you don't have to send out an api request on every single
view window scroll or change, but the main point is that you wouldn't be requesting for
ALL the relevant data to a user on the initial app render.

Something thats interesting to note is that I was initially going to perform pagination 
as the JSON data was in the order of megabytes in size, however, after using the
3rd party compression packages that size got reduced by over 99.97% which is pretty crazy
when you think about it.*/

/*--- General ---*/
Framer Motion was the easiest React animations library that I found.

Resource for animating routes with Framer Motion:
  -https://www.youtube.com/watch?v=Imyi2V7WgGU&ab_channel=TheNetNinja

/*--- Scrolling ---*/
In order to scroll, the CHILD DIV (NOT THE GRANDCHILD DIV) needs to have a set 
height that overflows its parent, and the parent div needs to have overflow: auto

/*--- AWS Configs ---*/
Resource for EC2 config:

Resource for EC2 errors:
  https://www.youtube.com/watch?v=sXZVkOH6hrA&t=444s&ab_channel=FelixYu
  commands for erasing code deploy and reinstalling:
    sudo yum erase codedeploy-agent 
    cd /opt 
    sudo rm -r codedeploy-agent
    cd
    sudo rm -r express-app
    sudo ./install auto
  
Remember, the ApplicationStop LifeCycle hook is pulled from the previously successful
deployment as the appspec.yml and the scripts haven't even been downloaded yet

Resource for RDS config:

Resource for SSH into RDS: 
  https://medium.com/@deepspaceprog/how-to-connect-via-ssh-to-an-amazon-rds-instance-running-postgresql-5e7661cdd37e
  commands:
    psql -h hostname -p portNumber -U userName dbName -W
  ^Assumes proper inbound rules and security groups

Resource for using ngrok which enables a free SSL cert for my app (although on each restart
it'll point me to a new url):
  https://stackoverflow.com/questions/19926385/amazon-ec2-ssl
  https://gist.github.com/leobrines/949f28e743154dac43a9a0d3c5747982

Installing ngrok commands:
  wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
  unzip ngrok-stable-linux-amd64.zip
  rm ngrok-stable-linux-amd64.zip
  chmod 755 ngrok
  mv ngrok /usr/bin/

Configuring ngrok command:
  ngrok authtoken <Auth token>

Running ngrok command:
  ngrok http 5000

Installing dependenceis for env vars config
  #install jq
  sudo yum install jq

  #install aws cli
  curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  unzip awscliv2.zip
  rm -rf awscliv2.zip
  sudo ./aws/install
  rm -rf aws

Resource for utilizing metadata tags as env vars:
  https://stackoverflow.com/questions/28643573/how-to-set-an-environment-variable-in-amazon-ec2
  https://github.com/12moons/ec2-tags-env

Its important for the Name tag to be persistent on your Code Deploy group and your EC2
Instance as it

/*--- Areas for Improvement ---*/
Should have architected out my routes more completely before beginning the project

Have better knowledge of when my components should or shouldn't be rerendering

I should have utilized my semantic html elements instead of overrelying on divs and spans

Set all el's to border-sizing: border-box from the beginning

/*Big area for improvement is that a styles library or framework should have been used here.
Ex: 
 -Bootstrap
 -Material UI
 -Tailwind CSS
 -Styled components

Because although its been fun to build all of this from scratch, the overall styling
has been the biggest time consumer for this project and there are certain aesthetic 
principles which I've discovered (scaling padding in proportions or the different
proportion of grey scaled text to indicate importance) and maybe didn't seem like 
the hardest or most complex thing to utilize however implementing it smoothly and
correctly actually does take an extreme attention to detail. I love the CSS and
having complete customizability over everything but I think that has led to me 
bottle necking this project and reinventing the wheel on a lot of different 
components.

For example styling a phone number component to include a text mask would have
taken several hours, however I just used an external package and solved the 
problem almost immediately. I've also been creating so many components that 
style libraries offer as one of their core components such as a header bar,
or a drop down menu, or even a time picker input. 

Things like a drop down menu are easy enough for me to do, but when on the 
same form I'm using an extermal library for the time picker (Flatpickr.js)
the styling can look a bit inconsistent*/

Another big area of improvement would be the security in our hosting. In order to make
things easier we basically set everything to public. Our inbound and outbound rules on the
EC2 and RDS servers is not very safe and we allow SSH from anywhere.












